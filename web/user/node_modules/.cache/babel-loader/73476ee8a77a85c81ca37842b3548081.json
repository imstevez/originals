{"ast":null,"code":"var _jsxFileName = \"/home/steve/go/src/originals/web/user/originals-user/src/Complete.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst styles = theme => ({\n  root: {\n    width: 'auto',\n    display: 'block',\n    padding: '50px 0'\n  },\n  paper: {\n    width: 600,\n    margin: 'auto',\n    padding: '40px 30px'\n  },\n  input: {\n    width: 400\n  },\n  button: {\n    margin: 20,\n    width: 150\n  },\n  rightIcon: {\n    marginLeft: theme.spacing.unit\n  },\n  divider: {\n    margin: '0 0 20px 0'\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 100,\n    height: 100,\n    cursor: 'pointer'\n  },\n  fileInput: {\n    display: 'none'\n  }\n});\n\nconst obj2params = obj => {\n  let result = '';\n  let item;\n\n  for (item in obj) {\n    result += '&' + item + '=' + encodeURIComponent(obj[item]);\n  }\n\n  if (result) {\n    result = result.slice(1);\n  }\n\n  return result;\n};\n\nclass Complete extends React.Component {\n  constructor(props) {\n    super(props);\n    let err = {\n      nickname: false,\n      password: false\n    };\n    let data = {\n      token: \"\",\n      email: \"\",\n      nickname: \"\",\n      password: \"\",\n      avatar: \"\",\n      avatarSrc: \"http://localhost:8080/user/statics/avatar/avatar_default.png\"\n    };\n    let validate = {\n      nickname: false,\n      password: false\n    };\n    this.state = {\n      err: err,\n      validate: validate,\n      data: data\n    };\n  }\n\n  componentDidMount() {\n    let payload = this.props.match.params.token.split(\".\")[1];\n    let tokenObj = JSON.parse(atob(payload));\n    let now = new Date().getTime();\n\n    if (!tokenObj.email) {\n      alert(\"token invalid\");\n      this.props.history.push(\"/register\");\n      return;\n    }\n\n    if (now > tokenObj.exp * 1000) {\n      alert(\"token expired, please register again\");\n      this.props.history.push(\"/register\");\n      return;\n    }\n\n    let data = this.state.data;\n    data.token = this.props.match.params.token;\n    data.email = tokenObj.email;\n    this.setState({\n      data: data\n    });\n  }\n\n  handleName(e) {\n    let data = this.state.data;\n    data.nickname = e.target.value;\n    this.setState({\n      data: data\n    });\n\n    if (this.state.data.nickname === \"\") {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.nickname = false;\n      validate.nickname = false;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    } else if (this.state.data.nickname.length < 4) {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.nickname = true;\n      validate.nickname = false;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    } else {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.nickname = false;\n      validate.nickname = true;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    }\n  }\n\n  handlePassword(e) {\n    let data = this.state.data;\n    data.password = e.target.value;\n    this.setState({\n      data: data\n    });\n\n    if (this.state.data.password === \"\") {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.password = false;\n      validate.password = false;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    } else if (this.state.data.password.length < 4) {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.password = true;\n      validate.password = false;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    } else {\n      let err = this.state.err;\n      let validate = this.state.validate;\n      err.password = false;\n      validate.password = true;\n      this.setState({\n        err: err,\n        validate: validate\n      });\n    }\n  }\n\n  handleSubmit() {\n    if (this.state.validate.nickname && this.state.validate.password) {\n      let formData = new FormData();\n      formData.append('nickname', this.state.data.nickname);\n      formData.append('password', this.state.data.password);\n\n      if (this.state.avatar) {\n        formData.append('avatar', this.state.data.avatar);\n      }\n\n      fetch('http://localhost:8080/user/auth/register', {\n        method: 'POST',\n        headers: {\n          \"x-register-token\": this.state.data.token\n        },\n        body: formData\n      }).then(rsp => {\n        rsp.json();\n      }).then(data => {\n        if (data.code === 200) {\n          alert(\"register complete successfully, please login\");\n        } else {\n          alert(data.message);\n        }\n      }).catch(err => {\n        alert(err);\n      });\n    }\n  }\n\n  handleAvatar(e) {\n    let file = e.target.files[0];\n    let reader = new FileReader();\n    let that = this;\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      let data = that.state.data;\n      data.avatar = file;\n      data.avatarSrc = this.result;\n      that.setState({\n        data: data\n      });\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const data = this.state.data;\n    const err = this.state.err;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(Paper, {\n      className: classes.paper,\n      elevation: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      color: \"textPrimary\",\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Complete\"), React.createElement(Divider, {\n      variant: \"middle\",\n      className: classes.divider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      accept: \"image/*\",\n      className: classes.fileInput,\n      id: \"avatar-file\",\n      multiple: true,\n      type: \"file\",\n      onChange: e => this.handleAvatar(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"avatar-file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      alt: \"\",\n      src: data.avatarSrc,\n      className: classes.bigAvatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"complete-email\",\n      disabled: true,\n      label: \"Email\",\n      type: \"text\",\n      value: data.email,\n      className: classes.input,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      id: \"complete-nickname\",\n      error: err.nickname,\n      value: data.nickname,\n      onChange: e => this.handleName(e),\n      label: \"Nickname\",\n      type: \"text\",\n      className: classes.input,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      id: \"complete-password\",\n      error: err.password,\n      value: data.password,\n      onChange: e => this.handlePassword(e),\n      label: \"Password\",\n      type: \"password\",\n      className: classes.input,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      onClick: () => this.handleSubmit(),\n      color: \"primary\",\n      className: classes.button,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"COMPLETE\"))));\n  }\n\n}\n\nComplete.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Complete);","map":{"version":3,"sources":["/home/steve/go/src/originals/web/user/originals-user/src/Complete.js"],"names":["React","PropTypes","withStyles","Paper","CssBaseline","TextField","Button","Grid","Typography","Divider","Avatar","styles","theme","root","width","display","padding","paper","margin","input","button","rightIcon","marginLeft","spacing","unit","divider","bigAvatar","height","cursor","fileInput","obj2params","obj","result","item","encodeURIComponent","slice","Complete","Component","constructor","props","err","nickname","password","data","token","email","avatar","avatarSrc","validate","state","componentDidMount","payload","match","params","split","tokenObj","JSON","parse","atob","now","Date","getTime","alert","history","push","exp","setState","handleName","e","target","value","length","handlePassword","handleSubmit","formData","FormData","append","fetch","method","headers","body","then","rsp","json","code","message","catch","handleAvatar","file","files","reader","FileReader","that","readAsDataURL","onload","render","classes","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst styles = theme => ({\n    root: {width: 'auto', display: 'block',padding: '50px 0'},\n    paper: {width: 600, margin: 'auto', padding: '40px 30px',},\n    input: {width: 400},\n    button: {margin: 20, width: 150,},\n    rightIcon: {marginLeft: theme.spacing.unit,},\n    divider: {margin: '0 0 20px 0'},\n    bigAvatar: {margin: 10, width: 100, height: 100, cursor: 'pointer'},\n    fileInput: {display: 'none',},\n});\n\nconst obj2params = obj =>  {\n    let result = '';\n    let item;\n    for(item in obj){\n        result += '&' + item + '=' +encodeURIComponent(obj[item]);\n    }\n    if(result) {\n        result = result.slice(1);\n    }\n    return result;\n};\n\nclass Complete extends React.Component {\n    constructor(props) {\n        super(props);\n        let err = {\n            nickname: false,\n            password: false\n        };\n        let data = {\n            token: \"\",\n            email: \"\",\n            nickname: \"\",\n            password: \"\",\n            avatar: \"\",\n            avatarSrc: \"http://localhost:8080/user/statics/avatar/avatar_default.png\"\n        };\n        let validate = {\n            nickname: false,\n            password: false\n        };\n        this.state = {\n            err: err,\n            validate: validate,\n            data: data\n        }\n    }\n\n    componentDidMount() {\n        let payload = this.props.match.params.token.split(\".\")[1];\n        let tokenObj = JSON.parse(atob(payload));\n        let now = (new Date()).getTime();\n        if (!tokenObj.email) {\n            alert(\"token invalid\");\n            this.props.history.push(\"/register\");\n            return;\n        }\n        if (now > tokenObj.exp * 1000) {\n            alert(\"token expired, please register again\");\n            this.props.history.push(\"/register\");\n            return;\n        }\n        let data = this.state.data;\n        data.token = this.props.match.params.token;\n        data.email = tokenObj.email;\n        this.setState({\n            data: data\n        });\n    }\n\n    handleName(e) {\n        let data = this.state.data;\n        data.nickname = e.target.value;\n        this.setState({\n            data: data,\n        });\n        if(this.state.data.nickname === \"\") {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.nickname = false;\n            validate.nickname = false;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        } else if (this.state.data.nickname.length < 4) {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.nickname = true;\n            validate.nickname = false;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        } else {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.nickname = false;\n            validate.nickname = true;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        }\n    }\n\n    handlePassword(e) {\n        let data = this.state.data;\n        data.password = e.target.value;\n        this.setState({\n            data: data,\n        });\n        if(this.state.data.password === \"\") {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.password = false;\n            validate.password = false;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        } else if (this.state.data.password.length < 4) {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.password = true;\n            validate.password = false;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        } else {\n            let err = this.state.err;\n            let validate = this.state.validate;\n            err.password = false;\n            validate.password = true;\n            this.setState({\n                err: err,\n                validate: validate\n            });\n        }\n    }\n    handleSubmit() {\n        if(this.state.validate.nickname && this.state.validate.password) {\n            let formData = new FormData();\n\n            formData.append('nickname', this.state.data.nickname);\n            formData.append('password', this.state.data.password);\n            if(this.state.avatar) {\n                formData.append('avatar', this.state.data.avatar);\n            }\n\n            fetch('http://localhost:8080/user/auth/register', {\n                method: 'POST',\n                headers: {\n                    \"x-register-token\": this.state.data.token\n                },\n                body: formData\n            }).then(rsp => {\n                    rsp.json();\n            }).then(data => {\n                if(data.code === 200) {\n                    alert(\"register complete successfully, please login\")\n                } else {\n                    alert(data.message)\n                }\n            }).catch(err => {\n                alert(err)\n            });\n        }\n    }\n\n    handleAvatar(e){\n        let file = e.target.files[0];\n        let reader = new FileReader();\n        let that = this;\n\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            let data = that.state.data;\n            data.avatar = file;\n            data.avatarSrc = this.result;\n            that.setState({\n                data: data\n            });\n        };\n    }\n    render() {\n        const { classes } = this.props;\n        const data = this.state.data;\n        const err = this.state.err;\n        return (\n            <div className={classes.root}>\n                <CssBaseline/>\n                <Paper className={classes.paper} elevation={1}>\n                    <Typography component=\"h1\" variant=\"h5\" color=\"textPrimary\" gutterBottom>\n                        Complete\n                    </Typography>\n                    <Divider variant=\"middle\" className={classes.divider} />\n                    <Grid container justify=\"center\">\n                        <input\n                            accept=\"image/*\"\n                            className={classes.fileInput}\n                            id=\"avatar-file\"\n                            multiple\n                            type=\"file\"\n                            onChange={e => this.handleAvatar(e)}\n                        />\n                        <label htmlFor=\"avatar-file\">\n                            <Avatar alt=\"\" src={data.avatarSrc} className={classes.bigAvatar} />\n                        </label>\n                    </Grid>\n                    <Grid container justify=\"center\">\n                        <TextField id=\"complete-email\" disabled label=\"Email\" type=\"text\" value={data.email} className={classes.input} margin=\"normal\"/>\n                        <TextField id=\"complete-nickname\" error={err.nickname} value={data.nickname} onChange={e => this.handleName(e)}  label=\"Nickname\" type=\"text\" className={classes.input} margin=\"normal\"/>\n                        <TextField id=\"complete-password\" error={err.password} value={data.password} onChange={e => this.handlePassword(e)}  label=\"Password\" type=\"password\" className={classes.input} margin=\"normal\"/>\n                        <Button variant=\"contained\" onClick={() => this.handleSubmit()} color=\"primary\" className={classes.button} size=\"large\">\n                            COMPLETE\n                        </Button>\n                    </Grid>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nComplete.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Complete);\n"]},"metadata":{},"sourceType":"module"}