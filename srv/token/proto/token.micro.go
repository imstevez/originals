// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: token.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Token service

type TokenService interface {
	GetInviteToken(ctx context.Context, in *GetInviteTokenReq, opts ...client.CallOption) (*GetInviteTokenRsp, error)
	VerifyInvite(ctx context.Context, in *VerifyInviteReq, opts ...client.CallOption) (*VerifyInviteRsp, error)
	GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...client.CallOption) (*GetAuthTokenRsp, error)
	VerifyAuth(ctx context.Context, in *VerifyAuthReq, opts ...client.CallOption) (*VerifyAuthRsp, error)
}

type tokenService struct {
	c    client.Client
	name string
}

func NewTokenService(name string, c client.Client) TokenService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &tokenService{
		c:    c,
		name: name,
	}
}

func (c *tokenService) GetInviteToken(ctx context.Context, in *GetInviteTokenReq, opts ...client.CallOption) (*GetInviteTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.GetInviteToken", in)
	out := new(GetInviteTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) VerifyInvite(ctx context.Context, in *VerifyInviteReq, opts ...client.CallOption) (*VerifyInviteRsp, error) {
	req := c.c.NewRequest(c.name, "Token.VerifyInvite", in)
	out := new(VerifyInviteRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...client.CallOption) (*GetAuthTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.GetAuthToken", in)
	out := new(GetAuthTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) VerifyAuth(ctx context.Context, in *VerifyAuthReq, opts ...client.CallOption) (*VerifyAuthRsp, error) {
	req := c.c.NewRequest(c.name, "Token.VerifyAuth", in)
	out := new(VerifyAuthRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenHandler interface {
	GetInviteToken(context.Context, *GetInviteTokenReq, *GetInviteTokenRsp) error
	VerifyInvite(context.Context, *VerifyInviteReq, *VerifyInviteRsp) error
	GetAuthToken(context.Context, *GetAuthTokenReq, *GetAuthTokenRsp) error
	VerifyAuth(context.Context, *VerifyAuthReq, *VerifyAuthRsp) error
}

func RegisterTokenHandler(s server.Server, hdlr TokenHandler, opts ...server.HandlerOption) error {
	type token interface {
		GetInviteToken(ctx context.Context, in *GetInviteTokenReq, out *GetInviteTokenRsp) error
		VerifyInvite(ctx context.Context, in *VerifyInviteReq, out *VerifyInviteRsp) error
		GetAuthToken(ctx context.Context, in *GetAuthTokenReq, out *GetAuthTokenRsp) error
		VerifyAuth(ctx context.Context, in *VerifyAuthReq, out *VerifyAuthRsp) error
	}
	type Token struct {
		token
	}
	h := &tokenHandler{hdlr}
	return s.Handle(s.NewHandler(&Token{h}, opts...))
}

type tokenHandler struct {
	TokenHandler
}

func (h *tokenHandler) GetInviteToken(ctx context.Context, in *GetInviteTokenReq, out *GetInviteTokenRsp) error {
	return h.TokenHandler.GetInviteToken(ctx, in, out)
}

func (h *tokenHandler) VerifyInvite(ctx context.Context, in *VerifyInviteReq, out *VerifyInviteRsp) error {
	return h.TokenHandler.VerifyInvite(ctx, in, out)
}

func (h *tokenHandler) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, out *GetAuthTokenRsp) error {
	return h.TokenHandler.GetAuthToken(ctx, in, out)
}

func (h *tokenHandler) VerifyAuth(ctx context.Context, in *VerifyAuthReq, out *VerifyAuthRsp) error {
	return h.TokenHandler.VerifyAuth(ctx, in, out)
}
