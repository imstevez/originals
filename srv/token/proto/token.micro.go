// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: token.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Token service

type TokenService interface {
	GetRegisterToken(ctx context.Context, in *GetRegisterTokenReq, opts ...client.CallOption) (*GetRegisterTokenRsp, error)
	VerifyRegisterToken(ctx context.Context, in *VerifyRegisterTokenReq, opts ...client.CallOption) (*VerifyRegisterTokenRsp, error)
	GetLoginToken(ctx context.Context, in *GetLoginTokenReq, opts ...client.CallOption) (*GetLoginTokenRsp, error)
	VerifyLoginToken(ctx context.Context, in *VerifyLoginTokenReq, opts ...client.CallOption) (*VerifyLoginTokenRsp, error)
	RefreshLoginToken(ctx context.Context, in *RefreshLoginTokenReq, opts ...client.CallOption) (*RefreshLoginTokenRsp, error)
	CancelToken(ctx context.Context, in *CancelTokenReq, opts ...client.CallOption) (*CancelTokenRsp, error)
}

type tokenService struct {
	c    client.Client
	name string
}

func NewTokenService(name string, c client.Client) TokenService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &tokenService{
		c:    c,
		name: name,
	}
}

func (c *tokenService) GetRegisterToken(ctx context.Context, in *GetRegisterTokenReq, opts ...client.CallOption) (*GetRegisterTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.GetRegisterToken", in)
	out := new(GetRegisterTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) VerifyRegisterToken(ctx context.Context, in *VerifyRegisterTokenReq, opts ...client.CallOption) (*VerifyRegisterTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.VerifyRegisterToken", in)
	out := new(VerifyRegisterTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) GetLoginToken(ctx context.Context, in *GetLoginTokenReq, opts ...client.CallOption) (*GetLoginTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.GetLoginToken", in)
	out := new(GetLoginTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) VerifyLoginToken(ctx context.Context, in *VerifyLoginTokenReq, opts ...client.CallOption) (*VerifyLoginTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.VerifyLoginToken", in)
	out := new(VerifyLoginTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) RefreshLoginToken(ctx context.Context, in *RefreshLoginTokenReq, opts ...client.CallOption) (*RefreshLoginTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.RefreshLoginToken", in)
	out := new(RefreshLoginTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenService) CancelToken(ctx context.Context, in *CancelTokenReq, opts ...client.CallOption) (*CancelTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Token.CancelToken", in)
	out := new(CancelTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenHandler interface {
	GetRegisterToken(context.Context, *GetRegisterTokenReq, *GetRegisterTokenRsp) error
	VerifyRegisterToken(context.Context, *VerifyRegisterTokenReq, *VerifyRegisterTokenRsp) error
	GetLoginToken(context.Context, *GetLoginTokenReq, *GetLoginTokenRsp) error
	VerifyLoginToken(context.Context, *VerifyLoginTokenReq, *VerifyLoginTokenRsp) error
	RefreshLoginToken(context.Context, *RefreshLoginTokenReq, *RefreshLoginTokenRsp) error
	CancelToken(context.Context, *CancelTokenReq, *CancelTokenRsp) error
}

func RegisterTokenHandler(s server.Server, hdlr TokenHandler, opts ...server.HandlerOption) error {
	type token interface {
		GetRegisterToken(ctx context.Context, in *GetRegisterTokenReq, out *GetRegisterTokenRsp) error
		VerifyRegisterToken(ctx context.Context, in *VerifyRegisterTokenReq, out *VerifyRegisterTokenRsp) error
		GetLoginToken(ctx context.Context, in *GetLoginTokenReq, out *GetLoginTokenRsp) error
		VerifyLoginToken(ctx context.Context, in *VerifyLoginTokenReq, out *VerifyLoginTokenRsp) error
		RefreshLoginToken(ctx context.Context, in *RefreshLoginTokenReq, out *RefreshLoginTokenRsp) error
		CancelToken(ctx context.Context, in *CancelTokenReq, out *CancelTokenRsp) error
	}
	type Token struct {
		token
	}
	h := &tokenHandler{hdlr}
	return s.Handle(s.NewHandler(&Token{h}, opts...))
}

type tokenHandler struct {
	TokenHandler
}

func (h *tokenHandler) GetRegisterToken(ctx context.Context, in *GetRegisterTokenReq, out *GetRegisterTokenRsp) error {
	return h.TokenHandler.GetRegisterToken(ctx, in, out)
}

func (h *tokenHandler) VerifyRegisterToken(ctx context.Context, in *VerifyRegisterTokenReq, out *VerifyRegisterTokenRsp) error {
	return h.TokenHandler.VerifyRegisterToken(ctx, in, out)
}

func (h *tokenHandler) GetLoginToken(ctx context.Context, in *GetLoginTokenReq, out *GetLoginTokenRsp) error {
	return h.TokenHandler.GetLoginToken(ctx, in, out)
}

func (h *tokenHandler) VerifyLoginToken(ctx context.Context, in *VerifyLoginTokenReq, out *VerifyLoginTokenRsp) error {
	return h.TokenHandler.VerifyLoginToken(ctx, in, out)
}

func (h *tokenHandler) RefreshLoginToken(ctx context.Context, in *RefreshLoginTokenReq, out *RefreshLoginTokenRsp) error {
	return h.TokenHandler.RefreshLoginToken(ctx, in, out)
}

func (h *tokenHandler) CancelToken(ctx context.Context, in *CancelTokenReq, out *CancelTokenRsp) error {
	return h.TokenHandler.CancelToken(ctx, in, out)
}
