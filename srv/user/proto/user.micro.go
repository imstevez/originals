// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserSrv service

type UserSrvService interface {
	InviteUser(ctx context.Context, in *InviteUserReq, opts ...client.CallOption) (*InviteUserRsp, error)
	ParseInviteToken(ctx context.Context, in *ParseInviteTokenReq, opts ...client.CallOption) (*ParseInviteTokenRsp, error)
	InsertUser(ctx context.Context, in *InsertUserReq, opts ...client.CallOption) (*InsertUserRsp, error)
	GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...client.CallOption) (*GetAuthTokenRsp, error)
	ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, opts ...client.CallOption) (*ParseAuthTokenRsp, error)
}

type userSrvService struct {
	c    client.Client
	name string
}

func NewUserSrvService(name string, c client.Client) UserSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &userSrvService{
		c:    c,
		name: name,
	}
}

func (c *userSrvService) InviteUser(ctx context.Context, in *InviteUserReq, opts ...client.CallOption) (*InviteUserRsp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.InviteUser", in)
	out := new(InviteUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) ParseInviteToken(ctx context.Context, in *ParseInviteTokenReq, opts ...client.CallOption) (*ParseInviteTokenRsp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.ParseInviteToken", in)
	out := new(ParseInviteTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) InsertUser(ctx context.Context, in *InsertUserReq, opts ...client.CallOption) (*InsertUserRsp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.InsertUser", in)
	out := new(InsertUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...client.CallOption) (*GetAuthTokenRsp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.GetAuthToken", in)
	out := new(GetAuthTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, opts ...client.CallOption) (*ParseAuthTokenRsp, error) {
	req := c.c.NewRequest(c.name, "UserSrv.ParseAuthToken", in)
	out := new(ParseAuthTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSrv service

type UserSrvHandler interface {
	InviteUser(context.Context, *InviteUserReq, *InviteUserRsp) error
	ParseInviteToken(context.Context, *ParseInviteTokenReq, *ParseInviteTokenRsp) error
	InsertUser(context.Context, *InsertUserReq, *InsertUserRsp) error
	GetAuthToken(context.Context, *GetAuthTokenReq, *GetAuthTokenRsp) error
	ParseAuthToken(context.Context, *ParseAuthTokenReq, *ParseAuthTokenRsp) error
}

func RegisterUserSrvHandler(s server.Server, hdlr UserSrvHandler, opts ...server.HandlerOption) error {
	type userSrv interface {
		InviteUser(ctx context.Context, in *InviteUserReq, out *InviteUserRsp) error
		ParseInviteToken(ctx context.Context, in *ParseInviteTokenReq, out *ParseInviteTokenRsp) error
		InsertUser(ctx context.Context, in *InsertUserReq, out *InsertUserRsp) error
		GetAuthToken(ctx context.Context, in *GetAuthTokenReq, out *GetAuthTokenRsp) error
		ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, out *ParseAuthTokenRsp) error
	}
	type UserSrv struct {
		userSrv
	}
	h := &userSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&UserSrv{h}, opts...))
}

type userSrvHandler struct {
	UserSrvHandler
}

func (h *userSrvHandler) InviteUser(ctx context.Context, in *InviteUserReq, out *InviteUserRsp) error {
	return h.UserSrvHandler.InviteUser(ctx, in, out)
}

func (h *userSrvHandler) ParseInviteToken(ctx context.Context, in *ParseInviteTokenReq, out *ParseInviteTokenRsp) error {
	return h.UserSrvHandler.ParseInviteToken(ctx, in, out)
}

func (h *userSrvHandler) InsertUser(ctx context.Context, in *InsertUserReq, out *InsertUserRsp) error {
	return h.UserSrvHandler.InsertUser(ctx, in, out)
}

func (h *userSrvHandler) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, out *GetAuthTokenRsp) error {
	return h.UserSrvHandler.GetAuthToken(ctx, in, out)
}

func (h *userSrvHandler) ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, out *ParseAuthTokenRsp) error {
	return h.UserSrvHandler.ParseAuthToken(ctx, in, out)
}
