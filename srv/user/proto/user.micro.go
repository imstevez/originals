// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	IsEmailRegistered(ctx context.Context, in *IsEmailRegisteredReq, opts ...client.CallOption) (*IsEmailRegisteredRsp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*CreateUserRsp, error)
	VerifyUser(ctx context.Context, in *VerifyUserReq, opts ...client.CallOption) (*VerifyUserRsp, error)
	UpdateUserLoginDate(ctx context.Context, in *UpdateUserLoginDateReq, opts ...client.CallOption) (*UpdateUserLoginDateRsp, error)
	///////////////////////////////////
	Invite(ctx context.Context, in *InviteReq, opts ...client.CallOption) (*InviteRsp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterRsp, error)
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRsp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) IsEmailRegistered(ctx context.Context, in *IsEmailRegisteredReq, opts ...client.CallOption) (*IsEmailRegisteredRsp, error) {
	req := c.c.NewRequest(c.name, "User.IsEmailRegistered", in)
	out := new(IsEmailRegisteredRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*CreateUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(CreateUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyUser(ctx context.Context, in *VerifyUserReq, opts ...client.CallOption) (*VerifyUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.VerifyUser", in)
	out := new(VerifyUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserLoginDate(ctx context.Context, in *UpdateUserLoginDateReq, opts ...client.CallOption) (*UpdateUserLoginDateRsp, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserLoginDate", in)
	out := new(UpdateUserLoginDateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Invite(ctx context.Context, in *InviteReq, opts ...client.CallOption) (*InviteRsp, error) {
	req := c.c.NewRequest(c.name, "User.Invite", in)
	out := new(InviteRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterRsp, error) {
	req := c.c.NewRequest(c.name, "User.Register", in)
	out := new(RegisterRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(LoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRsp, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(LogoutRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	IsEmailRegistered(context.Context, *IsEmailRegisteredReq, *IsEmailRegisteredRsp) error
	CreateUser(context.Context, *CreateUserReq, *CreateUserRsp) error
	VerifyUser(context.Context, *VerifyUserReq, *VerifyUserRsp) error
	UpdateUserLoginDate(context.Context, *UpdateUserLoginDateReq, *UpdateUserLoginDateRsp) error
	///////////////////////////////////
	Invite(context.Context, *InviteReq, *InviteRsp) error
	Register(context.Context, *RegisterReq, *RegisterRsp) error
	Login(context.Context, *LoginReq, *LoginRsp) error
	Logout(context.Context, *LogoutReq, *LogoutRsp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		IsEmailRegistered(ctx context.Context, in *IsEmailRegisteredReq, out *IsEmailRegisteredRsp) error
		CreateUser(ctx context.Context, in *CreateUserReq, out *CreateUserRsp) error
		VerifyUser(ctx context.Context, in *VerifyUserReq, out *VerifyUserRsp) error
		UpdateUserLoginDate(ctx context.Context, in *UpdateUserLoginDateReq, out *UpdateUserLoginDateRsp) error
		Invite(ctx context.Context, in *InviteReq, out *InviteRsp) error
		Register(ctx context.Context, in *RegisterReq, out *RegisterRsp) error
		Login(ctx context.Context, in *LoginReq, out *LoginRsp) error
		Logout(ctx context.Context, in *LogoutReq, out *LogoutRsp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) IsEmailRegistered(ctx context.Context, in *IsEmailRegisteredReq, out *IsEmailRegisteredRsp) error {
	return h.UserHandler.IsEmailRegistered(ctx, in, out)
}

func (h *userHandler) CreateUser(ctx context.Context, in *CreateUserReq, out *CreateUserRsp) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) VerifyUser(ctx context.Context, in *VerifyUserReq, out *VerifyUserRsp) error {
	return h.UserHandler.VerifyUser(ctx, in, out)
}

func (h *userHandler) UpdateUserLoginDate(ctx context.Context, in *UpdateUserLoginDateReq, out *UpdateUserLoginDateRsp) error {
	return h.UserHandler.UpdateUserLoginDate(ctx, in, out)
}

func (h *userHandler) Invite(ctx context.Context, in *InviteReq, out *InviteRsp) error {
	return h.UserHandler.Invite(ctx, in, out)
}

func (h *userHandler) Register(ctx context.Context, in *RegisterReq, out *RegisterRsp) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *userHandler) Login(ctx context.Context, in *LoginReq, out *LoginRsp) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *LogoutReq, out *LogoutRsp) error {
	return h.UserHandler.Logout(ctx, in, out)
}
